name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
        source-url: https://nuget.pkg.github.com/KloderGit/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
       
    - name: Build with dotnet
#      run: dotnet publish --configuration Release -o ./GitHubBuildTest/publish/
      run: dotnet publish --configuration Release   


    - name: Define Version
      run: |
        export APK_NAME="release_$(monodis --assembly ./GitHubBuildTest/bin/Release/netcoreapp3.1/publish/GitHubBuildTest.dll | grep Version | sed 's/\s\+/,/g' | cut -d , -f2)"
        echo "::set-env name=AppVersion::${APK_NAME}"
#        export APP_VERSION=monodis --assembly ./GitHubBuildTest/bin/Release/netcoreapp3.1/publish/GitHubBuildTest.dll | grep Version | sed 's/\s\+/,/g' | cut -d , -f2
        
        
    - name: set environment variables
      uses: allenevans/set-env@v1.0.0
      with:
        MY_VAR: 'my value'
        MY_VERSION: ${TAG1}

    - name: Printenv
      run: |
        echo "MY_VAR=${MY_VAR}"
        echo "MY_VERSION=${MY_VERSION}"
        printenv

      
    - name: Ls
      run: |
        ls
        echo '------------------------------'
        ls GitHubBuildTest
        echo '------------------------------'
        ls ./GitHubBuildTest/bin/Release/netcoreapp3.1/publish/
        stat ./GitHubBuildTest/bin/Release/netcoreapp3.1/publish/GitHubBuildTest.dll
        echo '---------------ext---------------'
        echo ${{ env.AppVersion }}
        echo ${{ env.MY_VAR }}
        echo $APP_VERSION
        echo ${APP_VERSION}
        echo ${MY_VERSION}
        monodis --assembly ./GitHubBuildTest/bin/Release/netcoreapp3.1/publish/GitHubBuildTest.dll | grep Version | sed 's/\s\+/,/g' | cut -d , -f2

